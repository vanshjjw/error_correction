from sage.all import *
import ast


def factor(P,l,m):

    F = GF(2)

    # Step 2: Define the polynomial ring over GF(2) with variables x and y
    R = PolynomialRing(F, ['x', 'y'])
    x, y = R.gens()

    # Define the ideals generated by x^l - 1 and y^m - 1
    I_x = R.ideal(x**l - 1)
    I_y = R.ideal(y**m - 1)

    # Step 4: Create the quotient ring
    Q = R.quotient(I_x + I_y)

    # Step 5: Define a polynomial in the original ring
    #p = x**2 + x**5 * y + y + 1
    p = 0
    for pow in P:
        p+=(x**pow[0])*(y**pow[1])

    # Step 6: Factorize the polynomial in the original ring
    factors = p.factor()

    # Print the polynomial and its factors in the original ring
    print(f"Polynomial in original ring: {p}")
    print(f"Factors in original ring: {factors}")

    # Step 7: Map the factors into the quotient ring
    Q_factors = [(Q(f), multiplicity) for f, multiplicity in factors]

    # Print the factors in the quotient ring
    print(f"Factors in quotient ring:{Q_factors}")
    for factor, multiplicity in Q_factors:
        print(f"Factor: {factor}, Multiplicity: {multiplicity}")

if __name__ == '__main__':
    L=input()
    L = ast.literal_eval(L)
    P=L[0]
    l=int(L[1])
    m=int(L[2])
    factor(P,l,m)